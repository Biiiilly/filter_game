import game.world3.level2 -- hide

open set -- hide

variable {α : Type*} --hide

namespace filter_basis

/-

# Order World

## Level 3 : `filter_basis.filter_basis_filter_le`

Next, we want to consider how to define '≤' on filter basis.
Notice that the equivalence above is not always satisfied for filter basis.
Why? Hint: Look at which lemma you used in the proof of above example.

So, considering two filter basis B and C, we say B is finer than C if
any set of C contains some set of B, denoted as 'B ≤ᵇ C'.
We use '≤ᵇ' instead of '≤' here since it doesn't satisfy partial order.
i.e. if B ≤ C and C ≤ B, it doesn't always imply B = C.
Let's define `le` on filter basis:

```
def le (B C : filter_basis α) := ∀ {s : set α}, s ∈ C → (∃ t ∈ B, t ⊆ s)
```

We denote it as B ≤ᵇ C:

```
notation B `≤ᵇ` C := filter_basis.le B C
```

Next, let's think about how to prove this:
-/

/- Lemma
If filter base B is finer than filter base C then the filter generated by B 
is finer than the filter generated by C.
-/
lemma filter_basis_filter_le {B C : filter_basis α} (h : B ≤ᵇ C) :
  filter_basis.filter B ≤ filter_basis.filter C :=
begin
  sorry








end

end filter_basis